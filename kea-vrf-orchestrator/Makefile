# Makefile for Kea Per-VRF DHCP Service Orchestrator

# Compiler and Linker
CC = gcc
CFLAGS = -Wall -Wextra -g -std=c11 -pthread
LDFLAGS = -pthread # Add libraries here if needed, e.g. -lmnl

# Source files
SRCS = src/orchestrator.c

# Target executable
TARGET_DIR = build
TARGET = $(TARGET_DIR)/orchestrator

# Default action
all: $(TARGET)

# Compile the orchestrator
$(TARGET): $(SRCS) | $(TARGET_DIR)
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS)
	@echo "Orchestrator compiled: $@"

# Create build directory if it doesn't exist
$(TARGET_DIR):
	mkdir -p $(TARGET_DIR)

# Clean build files
clean:
	@echo "Cleaning build files..."
	rm -f $(TARGET)
	rm -rf $(TARGET_DIR)/*
	# Optionally, clean generated Kea configs by the orchestrator if its default dir is known
	# rm -f config/kea-dhcp4-*.conf config/kea-dhcp6-*.conf
	@echo "Cleaning helper script generated Kea configs in ./config (if any from C code)..."
	# This matches the KEA_CONFIG_DIR from orchestrator.c if run from build/
    # If orchestrator is run from root, KEA_CONFIG_DIR = ../config means it will create them in root project config/
    # The C code has KEA_CONFIG_DIR "../config", assuming orchestrator is run from build/
	find ./config -name 'kea-dhcp4-*.conf' -type f -print -delete
	find ./config -name 'kea-dhcp6-*.conf' -type f -print -delete
	@echo "Cleaning Kea lease files and logs (common paths)..."
	sudo rm -f /var/lib/kea/kea-leases*-*.csv
	sudo rm -f /var/log/kea/kea-*-*.log
	@echo "Done."

# Run the orchestrator (assumes it's run from project root, executable in build/)
run: all
	@echo "Running the orchestrator (sudo may be required for network operations)..."
	sudo $(TARGET)

# --- Test Environment Management ---
# These require scripts to be executable: chmod +x scripts/*.sh
# Variables for test setup
TEST_VRF_NAME ?= vrf-red
TEST_VRF_TABLE_ID ?= 1001
# Path to Kea config template (relative to scripts/ or use absolute)
# The start_kea_in_ns.sh script takes an absolute or relative path to the config.
# For this example, we'll assume a simple config is generated by the orchestrator,
# or a pre-made one is in config/ for the specific VRF.
# For now, let's assume the orchestrator itself will generate the required config for vrf-red.
# If using a template for manual script testing:
KEA4_TEST_CONFIG_TEMPLATE = config/kea-dhcp4-template.conf
KEA4_TEST_CONFIG_INSTANCE = config/kea-dhcp4-$(TEST_VRF_NAME).conf


# Setup a basic test environment: VRF, namespace, veths (Kea started by orchestrator later or manually)
# This setup is what the orchestrator C code *would* do for vrf-red.
# So, this target is mostly for understanding/manual script testing.
setup-test-vrf-basic:
	@echo "Setting up basic VRF environment for $(TEST_VRF_NAME) using scripts/setup_vrf_ns.sh..."
	sudo ./scripts/setup_vrf_ns.sh $(TEST_VRF_NAME) $(TEST_VRF_TABLE_ID)
	@echo "Basic VRF environment for $(TEST_VRF_NAME) created."
	@echo "You would now typically start the orchestrator, or manually start Kea:"
	@echo "  e.g., make run (to start orchestrator which handles $(TEST_VRF_NAME))"
	@echo "  OR manually: sudo ./scripts/start_kea_in_ns.sh $(TEST_VRF_NAME)_ns kea-dhcp4 $(KEA4_TEST_CONFIG_INSTANCE)"
	@echo "    (make sure $(KEA4_TEST_CONFIG_INSTANCE) is prepared from $(KEA4_TEST_CONFIG_TEMPLATE))"

# Run the DHCP client test script
# Assumes the orchestrator is already running and managing TEST_VRF_NAME,
# or Kea has been started manually for that VRF.
run-dhcp-test:
	@echo "Running DHCP client test for VRF $(TEST_VRF_NAME) using tests/run_dhcp_client_test.sh..."
	@echo "Ensure the orchestrator is running OR Kea is manually started for $(TEST_VRF_NAME)."
	sudo ./tests/run_dhcp_client_test.sh $(TEST_VRF_NAME)

# Clean up the entire environment using the main cleanup script
cleanup-test-env:
	@echo "Cleaning up test environment using scripts/cleanup.sh..."
	sudo ./scripts/cleanup.sh $(TEST_VRF_NAME) # Pass VRF name to ensure its veth/ns are targeted
	# The general cleanup.sh is quite broad; for specific test VRF:
	# sudo ip netns del $(TEST_VRF_NAME)_ns 2>/dev/null || true
	# sudo ip link del veth_$(TEST_VRF_NAME)_h 2>/dev/null || true
	# sudo ip link del $(TEST_VRF_NAME) 2>/dev/null || true # If setup_vrf_ns created it
	@echo "Test environment cleanup attempt complete."

# Phony targets
.PHONY: all clean run setup-test-vrf-basic run-dhcp-test cleanup-test-env
